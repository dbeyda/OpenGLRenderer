#shader vertex#version 410 corelayout(location = 0) in vec4 position;layout(location = 1) in vec4 normal;layout(location = 2) in vec2 texCoord;out vec4 ambient;out vec2 fragTexCoord;out vec4 fragNormal;out vec4 pos;uniform mat4 u_MVP;uniform float u_ambientStrength;uniform vec4 u_ambientLightColor;void main(){    gl_Position = u_MVP * position;    fragTexCoord = texCoord;    ambient = u_ambientStrength * u_ambientLightColor;    ambient.a = 1.0f;    fragNormal = normalize(normal);    pos = position;};#shader fragment#version 410 corein vec4 ambient;in vec2 fragTexCoord;in vec4 fragNormal;in vec4 pos;layout(location = 0) out vec4 color;uniform sampler2D AmbientTexture;uniform sampler2D DiffuseTexture;uniform sampler2D BumpTexture;uniform float u_ka;uniform float u_kd;uniform float u_kc;uniform float u_kl;uniform float u_kq;uniform int u_sexp;uniform float u_mshi;uniform float u_ks;uniform mat4 u_invTransMV;uniform mat4 u_MV;uniform mat4 u_MVP;uniform mat4 u_proj;uniform bool u_hasAmbientTexture;uniform bool u_hasDiffuseTexture;uniform bool u_hasBumpTexture;vec3 expand(vec3 v){    return (v - 0.5) * 2;}void main(){    vec3 mvEye = vec3(0, 0, 0);    vec3 mvPos = normalize(vec3(u_MV * pos));    vec3 mvLight = normalize(mvEye - mvPos);    vec3 mvNormal = normalize(vec3(u_invTransMV * vec4(fragNormal.xyz, 0)));    vec3 mvBumpNormal;    if (u_hasBumpTexture)    {        vec3 bumpNormal = expand(texture(BumpTexture, fragTexCoord).xyz);        mvBumpNormal = normalize(bumpNormal);        mvNormal = mvBumpNormal;    }    float d = distance(u_proj * vec4(0, 0, 0, 1), u_MVP * pos);    float katt = 1 / (u_kc + u_kl * d + u_kq * d * d);    float kspot = pow(max(dot(-mvLight, vec3(0, 0, -1)), 0), u_sexp);    float dif = (mvLight.z > 0) ? (u_ka + u_kd * max(dot(mvNormal, mvLight), 0.0)) : 0;    dif = dif * katt * kspot;    vec4 diffuse = vec4(dif);    diffuse.w = 1.0;    if (u_hasDiffuseTexture)    {        diffuse = texture(DiffuseTexture, fragTexCoord) * diffuse;    }    vec4 ambientFinal = vec4(ambient);    if (u_hasAmbientTexture)    {        ambientFinal = texture(AmbientTexture, fragTexCoord) * ambientFinal;    }    float spec = 0;    if (mvLight.z > 0 && dot(mvNormal, mvLight) > 0)    {        spec = pow(max(dot(mvNormal, mvLight), 0), u_mshi);  // in our case, lightDir = viewDir;        spec = spec * katt * kspot;    }    color = (ambientFinal + diffuse) + spec * u_ks;    color.w = 1.0;};